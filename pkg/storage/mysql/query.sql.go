// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package mysql

import (
	"context"
	"database/sql"
	"time"
)

const createSecret = `-- name: createSecret :execresult
INSERT INTO secrets (
  id, content, passphrase, expires_at
) VALUES (
  ?, ?, ?, ?
)
`

type createSecretParams struct {
	ID         string
	Content    string
	Passphrase sql.NullString
	ExpiresAt  time.Time
}

func (q *Queries) createSecret(ctx context.Context, arg createSecretParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createSecret,
		arg.ID,
		arg.Content,
		arg.Passphrase,
		arg.ExpiresAt,
	)
}

const deleteSecret = `-- name: deleteSecret :exec
DELETE FROM secrets
WHERE id = ?
`

func (q *Queries) deleteSecret(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteSecret, id)
	return err
}

const getSecret = `-- name: getSecret :one
SELECT id, content, passphrase, expires_at FROM secrets WHERE id = ? LIMIT 1
`

func (q *Queries) getSecret(ctx context.Context, id string) (Secret, error) {
	row := q.db.QueryRowContext(ctx, getSecret, id)
	var i Secret
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.Passphrase,
		&i.ExpiresAt,
	)
	return i, err
}

const listExpiredSecretsIds = `-- name: listExpiredSecretsIds :many
SELECT id FROM secrets
WHERE expires_at < ?
ORDER BY id
`

func (q *Queries) listExpiredSecretsIds(ctx context.Context, expiresAt time.Time) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listExpiredSecretsIds, expiresAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
